#pragma once
#include <cstdint>

union AccessType
{
    uint8_t value;
    struct 
    {
        uint8_t r: 1; 
        uint8_t w: 1; 
        uint8_t constant: 1; 
    } bits;
};

#define OD_OBJECTS_COUNT {{ od_objects_count }}  // Number of objects in the dictionnary

struct OD_Data // Struct containing all of the raw data that can be saved and loaded
{
    {% for declaration in od_all_data_declarations %}
    {{ declaration }};
    {% endfor %}

    OD_Data() : {{ od_all_data_constructors|join(', ') }}{}
    void save();
    void load();
};

struct OD_Object
{
    const AccessType accessType;
    const uint8_t dataType;
    const void *valueSrc;

    OD_Object(uint8_t accessType, uint8_t dataType, void *valueSrc) : accessType{accessType}, dataType(dataType), valueSrc(valueSrc) {}
};

struct OD_Objects // Struct containing all of the dictionnary objects
{
    {% for declaration in od_all_object_declarations %}
    {{ declaration }};
    {% endfor %}

    OD_Objects(OD_Data &data) : {{ od_all_object_constructors|join(', ') }}{}
};

struct OD_ObjectEntry // Struct representing a dictionnary entry
{
    const uint16_t index;
    const uint16_t objectType;
    const uint8_t subNumber;
    const OD_Object *objects;

    OD_ObjectEntry(uint16_t index, uint16_t objectType, uint8_t subNumber, OD_Object *objects) : index(index), objectType(objectType), subNumber(subNumber), objects(objects) {}
    unsigned getSize(uint8_t subIndex);
};

class OD_ObjectDictionnary // Object dictionnary class that is usable for the user
{
private:
    const unsigned size;
    OD_Data data;
    OD_Objects objects;
    OD_ObjectEntry entries[OD_OBJECTS_COUNT];

public:
    OD_ObjectDictionnary() : size(OD_OBJECTS_COUNT), objects(data), entries{ {{- od_all_entry_constructors|join(', ') -}} }{}
    inline void save() { return data.save(); }
    inline void load() { return data.load(); }
    inline OD_Objects &getObjects() { return objects; }
    OD_ObjectEntry *findEntry(uint16_t index);
};